#!/bin/csh
# Version: $Revision: 28fe8b8921b670daaa1c3dd3bd1d5c9bd004461c $
# By $Author: Chris Mottram <C.Mottram@ljmu.ac.uk> $
# Make a deployment tar file.
# This contains:
# 	The Liric control system
#	Associated libraries and test programs
#	Startup scripts
#	Appropriate configuration
# Usage:
#	liric_make_deployment <machine>
if ( ${#argv} != 1 ) then
	echo "Please specify a deployment machine."
	echo "$0 <machine>"
	exit 1
endif
set machine_name = "$1"
if ( "${machine_name}" == "-help") then
	echo "$0 <machine>"
	exit 0
endif
switch ( ${machine_name} )
    case "liric":
	setenv HOSTTYPE "x86_64-linux"
	breaksw
    default:
	setenv HOSTTYPE "x86_64-linux"
endsw
set camera_name = "liric"
# dev root directory
set dev_dir 		= "~dev"
# dev binary root directory
set dev_bin_dir 	= "${dev_dir}/bin"
# directory script was run in
set current_dir		= `pwd`
# temporary directory containing root of deployment tree (which becomes root of tar).
set deployment_dir 	= "/tmp/liric_deployment"
# temporary directory for deployment temporary files
set deployment_tmp_dir 	= "/tmp/liric_deployment/tmp"
# temporary directory containing root icc directory.
set deployment_icc_dir 	= "/tmp/liric_deployment/icc"
# temporary directory containing root bin directory.
set deployment_bin_dir 	= "/tmp/liric_deployment/icc/bin"
# directory location of tar
set deployment_tar_dir 	= "${dev_dir}/public_html/liric/deployment"
# name of tar file
set deployment_tar 	= "liric_deployment_${machine_name}.tar"
# name of install script
set install_script      = liric_tar_install
setenv GREP "/bin/grep"
# bin_file_type is a string included in the output from 'file -L' used to determine
# which files in a directory are binaries.
# 'file -L' gives different results on ltdevx64 (Centos 7) and zen (Ubuntu 18.04 LTS)
# Hence this madness to determine which build environment we are working in
#set bin_file_type = "ELF 32-bit LSB executable"
if ( -r /etc/redhat-release ) then
# Centos 7
set bin_file_type = "ELF 64-bit LSB executable"
else if ( -r /etc/lsb-release )  then
# Ubuntu 18.04 (zen)
#    set bin_file_type = "ELF 64-bit LSB shared object"
# Ubuntu 18.04.5 (ltdevx64)
# So on ltdevx64 binaries built under Centos are "ELF 64-bit LSB executable" and binaries built under Ubuntu 18.04 are "ELF 64-bit LSB shared object".
    set bin_file_type = "ELF 64-bit LSB"
else
    echo "Unknown release system."
    exit 1
endif    
# Compatible with both Centos7 and Ubuntu 18.04?
# Nope as object files are "ELF 64-bit LSB relocatable"
#set bin_file_type = "ELF 64-bit LSB"
#set init_d_dir = "/etc/init.d"
# systemd dir is /lib/systemd/system/, but in Ubuntu 24.04 /lib is a soft-link to usr/lib . Therefore install
# in /usr/lib/systemd/system/, otherwise the untar destroys the /lib soft-link and you loose all the contents of /lib!
set systemd_dir = "/usr/lib/systemd/system/"
#
# Clear old deployment.
#
if (-d ${deployment_dir}) then
	echo "Deployment directory ${deployment_dir} already exists:clearing..."
	rm -rf ${deployment_dir}
endif
#
# Create directory structure
#
echo "Creating directory structure..."
set dir_count = 0
set dir_list = "${deployment_dir} ${deployment_dir}/${systemd_dir} ${deployment_icc_dir} ${deployment_bin_dir} ${deployment_dir}/icc/tmp ${deployment_dir}/icc/tmp/log_archive ${deployment_dir}/icc/log ${deployment_icc_dir}/config ${deployment_bin_dir}/scripts ${deployment_bin_dir}/liric/scripts ${deployment_bin_dir}/liric/test ${deployment_bin_dir}/liric/fmt ${deployment_bin_dir}/liric/java/ ${deployment_bin_dir}/ics_gui/java ${deployment_bin_dir}/ics_gui/java/wav ${deployment_bin_dir}/liric/c/${HOSTTYPE} ${deployment_bin_dir}/liric/detector/test/${HOSTTYPE} ${deployment_bin_dir}/liric/filter_wheel/test/${HOSTTYPE} ${deployment_bin_dir}/liric/nudgematic/test/${HOSTTYPE} ${deployment_bin_dir}/ics_util/c/${HOSTTYPE} ${deployment_bin_dir}/ccd/misc/${HOSTTYPE} ${deployment_bin_dir}/lib/${HOSTTYPE} ${deployment_bin_dir}/log_udp/test/${HOSTTYPE} ${deployment_bin_dir}/commandserver/test/${HOSTTYPE} ${deployment_bin_dir}/ngatastro/test/${HOSTTYPE} ${deployment_bin_dir}/javalib ${deployment_bin_dir}/autobooter/java ${deployment_bin_dir}/ics_util/c/${HOSTTYPE}"
foreach dir ( ${dir_list} )
	mkdir -p ${dir}
	if ($status != 0) then
	   echo "Failed to make directory ${dir}"
	   exit 2
	endif
	@ dir_count ++
end
echo "${dir_count} directories created."
#
# Copy jars
#
echo "Copying jars..."
set jar_list = "ngat_message_base.jar ngat_message_inst_dp.jar ngat_message_iss_inst.jar ngat_net.jar ngat_phase2.jar ngat_util.jar ngat_util_logging.jar ngat_fits.jar ngat_swing.jar ngat_sound.jar ngat_liric.jar "
set jar_count = 0
foreach jar ( ${jar_list} )
	echo "jar : ${jar}"
# copy jar to deployment location
	cp ${dev_bin_dir}/javalib/${jar} ${deployment_bin_dir}/javalib
	set cp_status = $status
	if( ${cp_status} != 0 ) then
	    echo "Copy failed: ${dev_bin_dir}/javalib/${jar} to ${deployment_bin_dir}/javalib"
	    exit 3
	endif
# ident contents of jar
	cd ${deployment_dir}
	rm -rf ${deployment_tmp_dir}
	mkdir ${deployment_tmp_dir}
	cp ${dev_bin_dir}/javalib/${jar} ${deployment_tmp_dir}
	cd ${deployment_tmp_dir}
	jar xvf ${jar} > ${deployment_tmp_dir}/jar_output.txt
	find . -name '*.class' -print > ${deployment_tmp_dir}/class_list.txt
	foreach class ( `cat ${deployment_tmp_dir}/class_list.txt` )
		( ident ${class} > ${deployment_tmp_dir}/ident.txt ) >& ${deployment_tmp_dir}/ident_error.txt
		set ident_string = `cat ${deployment_tmp_dir}/ident.txt`
		echo "${ident_string}" >>! ${deployment_tmp_dir}/ident_list.txt
	end
	if ( -r ${deployment_tmp_dir}/ident_list.txt) then
		cat ${deployment_tmp_dir}/ident_list.txt >>! ${deployment_icc_dir}/ident_list.txt 
	endif
# keep track of number of jars processed
	@ jar_count ++
end
echo "${jar_count} jars copied."
#
# Java classes
#
echo "Copying Java class directories..."
set java_class_dir_list = "autobooter/java ics_gui/java"
set java_class_dir_count = 0
set java_class_file_count = 0
foreach java_class_dir ( ${java_class_dir_list} )
	echo "Java class directory : ${java_class_dir}"
# copy java_class_dir to deployment location
	cp ${dev_bin_dir}/${java_class_dir}/*.class ${deployment_bin_dir}/${java_class_dir}
	set cp_status = $status
	if( ${cp_status} != 0 ) then
	    echo "Copy failed: ${dev_bin_dir}/${java_class_dir}/*.class to ${deployment_bin_dir}/${java_class_dir}"
	    exit 4
	endif
# ident each file in dir
	cd ${deployment_dir}
	rm -rf ${deployment_tmp_dir}
	mkdir ${deployment_tmp_dir}
	cd ${deployment_bin_dir}
	find ${java_class_dir} -name '*.class' -print > ${deployment_tmp_dir}/class_list.txt
	foreach class ( `cat ${deployment_tmp_dir}/class_list.txt` )
		( ident ${class} > ${deployment_tmp_dir}/ident.txt ) >& ${deployment_tmp_dir}/ident_error.txt
		set ident_string = `cat ${deployment_tmp_dir}/ident.txt`
		echo "${ident_string}" >>! ${deployment_tmp_dir}/ident_list.txt
		@ java_class_file_count ++
	end
	if ( -r ${deployment_tmp_dir}/ident_list.txt) then
		cat ${deployment_tmp_dir}/ident_list.txt >>! ${deployment_icc_dir}/ident_list.txt 
	endif
# keep track of number of java_class_dirs processed
	@ java_class_dir_count ++
end
echo "${java_class_dir_count} Java class directories copied with ${java_class_file_count} Java classes in them."
#
# C libraries
#
echo "Copying C libraries..."
set clib_list = "libcfitsio.so libngatastro.so libngatutil.so libestar_config.so liblog_udp.so libcommandserver.so libliric_detector.so libliric_filter_wheel.so libliric_nudgematic.so"
set clib_count = 0
foreach clib ( ${clib_list} )
	echo "C Library : ${clib}"
# copy clib to deployment location
	if( -r ${dev_bin_dir}/lib/${HOSTTYPE}/${clib} ) then
	    cp ${dev_bin_dir}/lib/${HOSTTYPE}/${clib} ${deployment_bin_dir}/lib/${HOSTTYPE}/
	else if( -r ${dev_bin_dir}/estar/lib/${HOSTTYPE}/${clib} ) then
	    cp ${dev_bin_dir}/estar/lib/${HOSTTYPE}/${clib} ${deployment_bin_dir}/lib/${HOSTTYPE}/
	else
	    echo "Copy failed: Could not find ${clib} in ${dev_bin_dir}/lib/${HOSTTYPE} or ${dev_bin_dir}/estar/lib/${HOSTTYPE}."
	    exit 5
	endif

	set cp_status = $status
	if( ${cp_status} != 0 ) then
	    echo "Copy failed: ${dev_bin_dir}/lib/${HOSTTYPE}/${clib} to ${deployment_bin_dir}/lib/${HOSTTYPE}/"
	    exit 5
	endif
# ident contents of lib
	cd ${deployment_dir}
	rm -rf ${deployment_tmp_dir}
	mkdir ${deployment_tmp_dir}
	cd ${deployment_bin_dir}
	( ident lib/${HOSTTYPE}/${clib} > ${deployment_tmp_dir}/ident.txt ) >& ${deployment_tmp_dir}/ident_error.txt
	set ident_string = `cat ${deployment_tmp_dir}/ident.txt`
	echo "${ident_string}" >>! ${deployment_tmp_dir}/ident_list.txt
	if ( -r ${deployment_tmp_dir}/ident_list.txt) then
		cat ${deployment_tmp_dir}/ident_list.txt >>! ${deployment_icc_dir}/ident_list.txt 
	endif
# keep track of number of clibs processed
	@ clib_count ++
end
echo "${clib_count} C libraries copied."
#
# C programs
#
echo "Copying C program directories..."
set dir_list = "ics_util/c/${HOSTTYPE} ccd/misc/${HOSTTYPE} log_udp/test/${HOSTTYPE} ngatastro/test/${HOSTTYPE} commandserver/test/${HOSTTYPE} liric/c/${HOSTTYPE} liric/detector/test/${HOSTTYPE} liric/filter_wheel/test/${HOSTTYPE} liric/nudgematic/test/${HOSTTYPE}"
set dir_count = 0
set file_count = 0
# clean out deployment_tmp_dir
cd ${deployment_dir}
rm -rf ${deployment_tmp_dir}
mkdir ${deployment_tmp_dir}
cd ${deployment_bin_dir}
# go through directory list
foreach dir ( ${dir_list} )
	echo "C test program directory : ${dir}"
# get file list
	find ${dev_bin_dir}/${dir}/* | ${GREP} -v '\.o' > ${deployment_tmp_dir}/file_list.txt
	foreach file ( `cat ${deployment_tmp_dir}/file_list.txt` )
# check file is an executable
#		set file_type = `file -L ${file}`
#		echo "File ${file} is of type ${file_type}." 
		file -L ${file} | ${GREP} -q "${bin_file_type}"
		set grep_status = $status
		if ( ${grep_status} == 0 ) then
			echo "Deploying ${file}."
# copy file to deployment location
			cp ${file} ${deployment_bin_dir}/${dir}
			set cp_status = $status
			if( ${cp_status} != 0 ) then
			    echo "Copy failed: ${file} to ${deployment_bin_dir}/${dir}"
			    exit 6
			endif
# ident file and add to list
			( ident ${dir}/${file:t} > ${deployment_tmp_dir}/ident.txt ) >& ${deployment_tmp_dir}/ident_error.txt
			set ident_string = `cat ${deployment_tmp_dir}/ident.txt`
			echo "${ident_string}" >>! ${deployment_tmp_dir}/ident_list.txt
			@ file_count ++
		else
			echo "NOT Deploying ${file}."
		endif
	end
	rm -f ${deployment_tmp_dir}/file_list.txt
# keep track of number of dirs processed
	@ dir_count ++
end
if ( -r ${deployment_tmp_dir}/ident_list.txt) then
	cat ${deployment_tmp_dir}/ident_list.txt >>! ${deployment_icc_dir}/ident_list.txt 
endif
cd ${deployment_dir}
rm -rf ${deployment_tmp_dir}
echo "${dir_count} C test program directories copied, containg ${file_count} C test programs."
#
# Scripts
#
echo "Copying scripts..."
set file_list = "bin/scripts/configure_tai_data.csh bin/scripts/delete_log_files.csh bin/scripts/killhup.csh bin/scripts/fuser_check bin/liric/scripts/liric_engineering_mode bin/ics_gui/java/icsgui"
set file_count = 0
cd ${dev_dir}
foreach file ( ${file_list} )
    set new_file = `echo ${file} | sed "s#${machine_name}\.##" | sed "s#${HOSTTYPE}\.##"`
    cp ${dev_dir}/${file} ${deployment_icc_dir}/${new_file}
    set cp_status = $status
    if( ${cp_status} != 0 ) then
	echo "Copy failed: ${dev_dir}/${file} to ${deployment_icc_dir}/${new_file}"
	exit 4
    endif
    @ file_count ++
end
echo "${file_count} scripts copied."
#
# Configs
#
# in bin sub-directories
echo "Copying machine configuration files..."
set file_list = "autobooter/java/${machine_name}.autobooter.properties liric/c/${HOSTTYPE}/${machine_name}.liric.c.properties liric/java/${machine_name}.fits.properties liric/java/${machine_name}.liric.net.properties liric/java/${machine_name}.liric.properties ics_gui/java/${machine_name}.ics_gui.properties ics_gui/java/${machine_name}.ics_gui_config.properties ics_gui/java/${machine_name}.ics_gui.fits.properties"
set file_count = 0
cd ${dev_dir}
foreach file ( ${file_list} )
    set new_file = `echo ${file} | sed "s#${machine_name}.livjm.ac.uk.##" | sed "s#${machine_name}\.##"`
    cp ${dev_bin_dir}/${file} ${deployment_bin_dir}/${new_file}
    set cp_status = $status
    if( ${cp_status} != 0 ) then
	echo "Copy failed: ${dev_bin_dir}/${file} to ${deployment_bin_dir}/${new_file}"
	exit 5
    endif
    @ file_count ++
end
echo "${file_count} configuration files copied."
echo "Copying camera configuration files..."
set file_list = "config/${camera_name}.current.filter.properties config/${camera_name}.filter.properties"
set file_count = 0
cd ${dev_dir}
foreach file ( ${file_list} )
    set new_file = `echo ${file} | sed "s#${camera_name}\.##"`
    cp ${dev_bin_dir}/${file} ${deployment_icc_dir}/${new_file}
    set cp_status = $status
    if( ${cp_status} != 0 ) then
	echo "Copy failed: ${dev_bin_dir}/${file} to ${deployment_icc_dir}/${new_file}"
	exit 5
    endif
    @ file_count ++
end
echo "${file_count} camera configuration files copied."
echo "Copying fmt files..."
set file_list = "liric/fmt/rap_1000ms.fmt liric/fmt/rap_100ms.fmt liric/fmt/rap_0ms.fmt"
set file_count = 0
cd ${dev_dir}
foreach file ( ${file_list} )
    set new_file = `echo ${file} | sed "s#${camera_name}\.##"`
    cp ${dev_bin_dir}/${file} ${deployment_bin_dir}/${new_file}
    set cp_status = $status
    if( ${cp_status} != 0 ) then
	echo "Copy failed: ${dev_bin_dir}/${file} to ${deployment_bin_dir}/${new_file}"
	exit 5
    endif
    @ file_count ++
end
echo "${file_count} fmt configuration files copied."
#
# systemd scripts
#
echo "Copying Autobooter systemd initialisation script."
set from_file = "${dev_bin_dir}/autobooter/java/${machine_name}.autobooter.service"
set to_file = "${deployment_dir}/${systemd_dir}/autobooter.service"
cp  ${from_file} ${to_file}
set cp_status = $status
if( ${cp_status} != 0 ) then
    echo "Copy failed: ${from_file} to ${to_file}"
    exit 6
endif
#
# gif files
#
echo "Copying gif/wav files..."
set file_list = "ics_gui/java/lt_icon.gif ics_gui/java/lt.gif ics_gui/java/wav/command_completed.wav ics_gui/java/wav/command_failed.wav ics_gui/java/wav/filename.wav ics_gui/java/wav/iss_message.wav ics_gui/java/wav/welcome.wav"
set file_count = 0
cd ${dev_dir}
foreach file ( ${file_list} )
    cp ${dev_bin_dir}/${file} ${deployment_bin_dir}/${file}
    set cp_status = $status
    if( ${cp_status} != 0 ) then
	echo "Copy failed: ${dev_bin_dir}/${file} to ${deployment_bin_dir}/${file}"
	exit 6
    endif
    @ file_count ++
end
echo "${file_count} gif/wav files copied."
#
# Tidy deployment temp
#
cd ${deployment_dir}
rm -rf ${deployment_tmp_dir}
#
# Create deployment tar
#
echo "--------------------------"
echo "Creating deployment tar..."
cd ${deployment_dir}
tar cvf ${deployment_tar_dir}/${deployment_tar} .
echo "GZipping deployment tar..."
cd ${deployment_tar_dir}
rm -f ${deployment_tar}.gz
gzip ${deployment_tar}
echo "Deployment tar : ${deployment_tar_dir}/${deployment_tar}.gz"
echo "Installation script : ${current_dir}/${install_script}"
rm -rf ${deployment_dir}
echo "Download from http://ltdevsrv.livjm.ac.uk/~dev/liric/deployment/index.html."
echo "Download ${deployment_tar}.gz liric_tar_install icc_cshrc icc_cshrc_edit.awk"
echo "Deployment ready."
